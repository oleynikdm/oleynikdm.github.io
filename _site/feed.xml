<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-23T22:06:28+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">oleynikdm.github.io</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Hash Map</title><link href="http://localhost:4000/inheritance/2021/11/22/hashmap.html" rel="alternate" type="text/html" title="Hash Map" /><published>2021-11-22T11:00:03+02:00</published><updated>2021-11-22T11:00:03+02:00</updated><id>http://localhost:4000/inheritance/2021/11/22/hashmap</id><content type="html" xml:base="http://localhost:4000/inheritance/2021/11/22/hashmap.html">&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public abstract class Geometry {
    public abstract double getArea() throws Exception;
    public abstract double getPerimeter() throws Exception;

    public boolean isRealSize(double size) throws Exception {
        if (size &amp;lt;= 0) {
            throw new Exception(&quot;Size should be greater than zero!&quot;);
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class Main {

    public static void main(String[] args) throws Exception {
        Square SQ = new Square();
        SQ.setSideSize(10);

        System.out.println(&quot;Area: &quot; + SQ.getArea());
        System.out.println(&quot;Perimeter: &quot; + SQ.getPerimeter());

    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;

public class Rectangle extends Geometry {
    protected double height = 0;
    protected double width = 0;
    public void setHeight(double h) throws Exception {
        if (this.isRealSize(h)) {
            this.height = h;
        }
    }
    public void setWidth(double w) throws Exception {
        if (this.isRealSize(w)) {
            this.width = w;
        }
    }

    public double getArea() throws Exception {
        this.isAllParametersAvailable();
        return this.height * this.width;

    }

    public double getPerimeter() throws Exception {
        this.isAllParametersAvailable();
        return 2 * this.height + 2 * this.width;
    }

    private void isAllParametersAvailable() throws Exception {
        if (this.height &amp;lt;= 0 || this.width &amp;lt;= 0 ) {
            throw new Exception(&quot;First you should set width and height!&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Rhombus extends Rectangle{
    public void setSideSize(double sSize) throws Exception {
        this.setHeight(sSize);
        this.setWidth(sSize);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Circle extends Ellipse {
    public void setDiameter(double sSize) throws Exception {
        this.setHeight(sSize);
        this.setWidth(sSize);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Square extends Rectangle {
    public void setSideSize(double sSize) throws Exception {
        this.setHeight(sSize);
        this.setWidth(sSize);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Triangle extends Geometry {
    private double side_a = 0;
    private double side_b = 0;
    private double side_c = 0;

    public void setSideA(double size) throws Exception {
        this.isRealSize(size);
        this.side_a = size;
    }

    public void setSideB(double size) throws Exception {
        this.isRealSize(size);
        this.side_b = size;
    }

    public void setSideC(double size) throws Exception {
        this.isRealSize(size);
        this.side_c = size;
    }


    private void isAllParametersAvailable() throws Exception {
        if (this.side_a &amp;lt;= 0 || this.side_b &amp;lt;= 0  || this.side_c &amp;lt;= 0) {
            throw new Exception(&quot;First you should set width and height!&quot;);
        }
    }

    public double getArea() {
        double p = this.getPerimeter() / 2;
        return Math.sqrt(p * (p - this.side_a) * (p - this.side_b) * (p - this.side_c));
    }
    public double getPerimeter() {
        return this.side_a + this.side_b + this.side_c;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Ellipse extends Geometry {
    protected double height = 0;
    protected double width = 0;
    public void setHeight(double h) throws Exception {
        if (this.isRealSize(h)) {
            this.height = h;
        }
    }
    public void setWidth(double w) throws Exception {
        if (this.isRealSize(w)) {
            this.width = w;
        }
    }


    public double getArea() throws Exception {
        this.isAllParametersAvailable();
        return Math.PI * this.width / 2 * this.height / 2;
    }
    public double getPerimeter() throws Exception {
        this.isAllParametersAvailable();
        return 4 * (Math.PI * this.width * this.height + (Math.max(this.width, this.height) - Math.min(this.width, this.height)))/(this.width + this.height) ;
    }


    private void isAllParametersAvailable() throws Exception {
        if (this.height &amp;lt;= 0 || this.width &amp;lt;= 0 ) {
            throw new Exception(&quot;First you should set width and height!&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Parallelogram extends Rectangle {
    private double angle = 0;

    public void setAcuteAngle(double angle) throws Exception {
        this.isRealSize(angle);
        this.angle = angle;
    }

    public double getArea() throws Exception {
        this.isAllParametersAvailable();
        if (this.angle &amp;gt; 0) {
            return this.height * this.width * Math.sin(this.angle);
        } else {
            return this.height * this.width;
        }
    }

    private void isAllParametersAvailable() throws Exception {
        if ((this.height &amp;lt;= 0 &amp;amp;&amp;amp; this.angle &amp;lt;= 0) || this.width &amp;lt;= 0 ) {
            throw new Exception(&quot;First you should set width and height or width and acute angle!&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;</content><author><name></name></author><category term="inheritance" /><summary type="html">```Java public abstract class Geometry { public abstract double getArea() throws Exception; public abstract double getPerimeter() throws Exception;</summary></entry><entry><title type="html">Geometry</title><link href="http://localhost:4000/inheritance/2021/11/22/Geometry.html" rel="alternate" type="text/html" title="Geometry" /><published>2021-11-22T11:00:03+02:00</published><updated>2021-11-22T11:00:03+02:00</updated><id>http://localhost:4000/inheritance/2021/11/22/Geometry</id><content type="html" xml:base="http://localhost:4000/inheritance/2021/11/22/Geometry.html">&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public abstract class Geometry {
    public abstract double getArea() throws Exception;
    public abstract double getPerimeter() throws Exception;

    public boolean isRealSize(double size) throws Exception {
        if (size &amp;lt;= 0) {
            throw new Exception(&quot;Size should be greater than zero!&quot;);
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class Main {

    public static void main(String[] args) throws Exception {
        Square SQ = new Square();
        SQ.setSideSize(10);

        System.out.println(&quot;Area: &quot; + SQ.getArea());
        System.out.println(&quot;Perimeter: &quot; + SQ.getPerimeter());

    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;

public class Rectangle extends Geometry {
    protected double height = 0;
    protected double width = 0;
    public void setHeight(double h) throws Exception {
        if (this.isRealSize(h)) {
            this.height = h;
        }
    }
    public void setWidth(double w) throws Exception {
        if (this.isRealSize(w)) {
            this.width = w;
        }
    }

    public double getArea() throws Exception {
        this.isAllParametersAvailable();
        return this.height * this.width;

    }

    public double getPerimeter() throws Exception {
        this.isAllParametersAvailable();
        return 2 * this.height + 2 * this.width;
    }

    private void isAllParametersAvailable() throws Exception {
        if (this.height &amp;lt;= 0 || this.width &amp;lt;= 0 ) {
            throw new Exception(&quot;First you should set width and height!&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Rhombus extends Rectangle{
    public void setSideSize(double sSize) throws Exception {
        this.setHeight(sSize);
        this.setWidth(sSize);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Circle extends Ellipse {
    public void setDiameter(double sSize) throws Exception {
        this.setHeight(sSize);
        this.setWidth(sSize);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Square extends Rectangle {
    public void setSideSize(double sSize) throws Exception {
        this.setHeight(sSize);
        this.setWidth(sSize);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Triangle extends Geometry {
    private double side_a = 0;
    private double side_b = 0;
    private double side_c = 0;

    public void setSideA(double size) throws Exception {
        this.isRealSize(size);
        this.side_a = size;
    }

    public void setSideB(double size) throws Exception {
        this.isRealSize(size);
        this.side_b = size;
    }

    public void setSideC(double size) throws Exception {
        this.isRealSize(size);
        this.side_c = size;
    }


    private void isAllParametersAvailable() throws Exception {
        if (this.side_a &amp;lt;= 0 || this.side_b &amp;lt;= 0  || this.side_c &amp;lt;= 0) {
            throw new Exception(&quot;First you should set width and height!&quot;);
        }
    }

    public double getArea() {
        double p = this.getPerimeter() / 2;
        return Math.sqrt(p * (p - this.side_a) * (p - this.side_b) * (p - this.side_c));
    }
    public double getPerimeter() {
        return this.side_a + this.side_b + this.side_c;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Ellipse extends Geometry {
    protected double height = 0;
    protected double width = 0;
    public void setHeight(double h) throws Exception {
        if (this.isRealSize(h)) {
            this.height = h;
        }
    }
    public void setWidth(double w) throws Exception {
        if (this.isRealSize(w)) {
            this.width = w;
        }
    }


    public double getArea() throws Exception {
        this.isAllParametersAvailable();
        return Math.PI * this.width / 2 * this.height / 2;
    }
    public double getPerimeter() throws Exception {
        this.isAllParametersAvailable();
        return 4 * (Math.PI * this.width * this.height + (Math.max(this.width, this.height) - Math.min(this.width, this.height)))/(this.width + this.height) ;
    }


    private void isAllParametersAvailable() throws Exception {
        if (this.height &amp;lt;= 0 || this.width &amp;lt;= 0 ) {
            throw new Exception(&quot;First you should set width and height!&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
public class Parallelogram extends Rectangle {
    private double angle = 0;

    public void setAcuteAngle(double angle) throws Exception {
        this.isRealSize(angle);
        this.angle = angle;
    }

    public double getArea() throws Exception {
        this.isAllParametersAvailable();
        if (this.angle &amp;gt; 0) {
            return this.height * this.width * Math.sin(this.angle);
        } else {
            return this.height * this.width;
        }
    }

    private void isAllParametersAvailable() throws Exception {
        if ((this.height &amp;lt;= 0 &amp;amp;&amp;amp; this.angle &amp;lt;= 0) || this.width &amp;lt;= 0 ) {
            throw new Exception(&quot;First you should set width and height or width and acute angle!&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;</content><author><name></name></author><category term="inheritance" /><summary type="html">```Java public abstract class Geometry { public abstract double getArea() throws Exception; public abstract double getPerimeter() throws Exception;</summary></entry></feed>